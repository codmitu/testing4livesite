{"version":3,"sources":["firebase.ts","App.tsx","redux/action-types/index.ts","emailAuth.ts","reportWebVitals.ts","redux/reducers/bankReducer.ts","redux/reducers/index.ts","redux/store.ts","index.tsx"],"names":["app","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","getAnalytics","getAuth","useDeviceLanguage","Providers","google","GoogleAuthProvider","facebook","FacebookAuthProvider","App","ActionType","emailRef","useRef","useAuthState","user","console","log","useEffect","isSignInWithEmailLink","window","location","href","email","JSON","parse","localStorage","getItem","prompt","signInWithEmailLink","then","result","removeItem","catch","error","code","message","className","type","placeholder","ref","onClick","current","value","sendSignInLinkToEmail","url","handleCodeInApp","setItem","stringify","signInWithPopup","credential","credentialFromResult","accessToken","credentialFromError","signOut","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducer","state","action","DEPOSIT","payload","WITHDRAW","BANKRUPT","reducers","combineReducers","bank","bankReducer","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.113bad42.chunk.js","sourcesContent":["// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getAnalytics } from \"firebase/analytics\";\r\nimport { FacebookAuthProvider, GoogleAuthProvider, getAuth  } from \"firebase/auth\";\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_APP_ID,\r\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconst analytics = getAnalytics(app);\r\nconst auth = getAuth()\r\nauth.useDeviceLanguage()\r\n// or auth.languageCode = 'ro'\r\nconst Providers = {\r\n  google: new GoogleAuthProvider(),\r\n  facebook: new FacebookAuthProvider(),\r\n};\r\n\r\nexport {Providers, auth}","import { MutableRefObject, useEffect, useRef } from \"react\";\nimport { FacebookAuthProvider, GoogleAuthProvider, isSignInWithEmailLink, signInWithEmailLink, signInWithPopup, signOut } from '@firebase/auth'\nimport {auth, Providers} from \"./firebase\"\nimport { emailAuth } from \"./emailAuth\";\nimport { useAuthState } from 'react-firebase-hooks/auth';\n\nfunction App() {\n  const emailRef = useRef() as MutableRefObject<HTMLInputElement>;\n  const [user, loading] = useAuthState(auth)\n  console.log(user)\n\n  const handleSignUp = () => {\n    const message = emailAuth(emailRef.current.value)\n    console.log(message)\n  }\n\n  const handleGoogle = () => {\n    signInWithPopup(auth, Providers.google)\n      .then((result) => {\n        const credential = GoogleAuthProvider.credentialFromResult(result)\n        const token = credential?.accessToken\n        const user = result.user\n      }).catch((error) => {\n        const errorCode = error.code\n        const errorMessage = error.message\n        const email = error.email\n        const credential = GoogleAuthProvider.credentialFromError(error)\n      })\n  }\n\n  const handleFacebook = () => {\n    signInWithPopup(auth, Providers.facebook)\n      .then((result) => {\n        const credential = FacebookAuthProvider.credentialFromResult(result)\n        const accessToken = credential?.accessToken\n        const user = result.user\n      }).catch((error) => {\n        const errorCode = error.code\n        const errorMessage = error.message\n        const email = error.email\n        const credential = FacebookAuthProvider.credentialFromError(error)\n      })\n  }\n\n  const handleLogOut = () => {\n    signOut(auth).then(() => {\n      console.log(\"signed out\")\n    }).catch((error) => {\n      console.log(error)\n    })\n  }\n\n  useEffect(() => {\n    if(isSignInWithEmailLink(auth, window.location.href)) {\n        let email = JSON.parse(localStorage.getItem('emailToSignUp') || '{}')\n        if(!email) {\n            email = window.prompt(\"Te rog adauga email-ul pentru confirmare.\")\n        }\n        console.log(email.email)\n        signInWithEmailLink(auth, email.email, window.location.href)\n          .then((result) => {\n              window.localStorage.removeItem('emailToSignUp')\n              console.log(result.user, result)\n          })\n          .catch((error) => {\n              console.log(error.code, error.message)\n          })\n    }\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <input type=\"email\" placeholder=\"email\" ref={emailRef}  />\n      <button onClick={handleSignUp}>Sign in with Email</button>\n      <button onClick={handleGoogle}>Sign in with Google</button>\n      <button onClick={handleFacebook}>Sign in with Facebook</button>\n      <button onClick={handleLogOut}>Log out</button>\n    </div>\n  );\n}\n\nexport default App;\n","export enum ActionType {\r\n    DEPOSIT = \"deposit\",\r\n    WITHDRAW = \"withdraw\",\r\n    BANKRUPT = \"bankrupt\"\r\n}","import { sendSignInLinkToEmail } from '@firebase/auth'\r\nimport {auth} from \"./firebase\"\r\n\r\nexport const emailAuth = (email: string) => {\r\n\r\n    const actionCodeSettings = {\r\n        // URL you want to redirect back to. The domain (www.example.com) for this\r\n        // URL must be in the authorized domains list in the Firebase Console.\r\n        url: 'https://codmitu.github.io/testing4livesite/',\r\n        // This must be true.\r\n        handleCodeInApp: true,\r\n        // iOS: {\r\n        //   bundleId: 'com.example.ios'\r\n        // },\r\n        // android: {\r\n        //   packageName: 'com.example.android',\r\n        //   installApp: true,\r\n        //   minimumVersion: '12'\r\n        // },\r\n        // dynamicLinkDomain: 'https://codmitu.github.io/lotto-generator/'\r\n      };\r\n\r\n\r\n    sendSignInLinkToEmail(auth, email, actionCodeSettings)\r\n        .then(() => {\r\n            console.log(\"check email\")\r\n            window.localStorage.setItem('emailToSignUp', JSON.stringify({\r\n                \"email\": email\r\n            }))\r\n        })\r\n        .catch((error) => {\r\n            console.log(error.code, error.message)\r\n        })\r\n\r\n    return \"check email\"\r\n}\r\n\r\n\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ActionType } from '../action-types'\r\nimport {Action} from '../actions/index'\r\n\r\nconst initialState = 0\r\n\r\nconst reducer = (state: number = initialState, action: Action) => {\r\n    switch (action.type) {\r\n        case ActionType.DEPOSIT:\r\n            return state + action.payload\r\n        case ActionType.WITHDRAW:\r\n            return state - action.payload\r\n        case ActionType.BANKRUPT:\r\n            return 0\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default reducer","import {combineReducers} from \"redux\"\r\nimport bankReducer from './bankReducer'\r\n\r\nconst reducers = combineReducers({ \r\n    bank: bankReducer\r\n})\r\n\r\nexport default reducers\r\n\r\nexport type State = ReturnType<typeof reducers>","import { applyMiddleware, createStore } from \"redux\";\r\nimport reducers from './reducers/index'\r\nimport thunk from 'redux-thunk'\r\n\r\n\r\nexport const store = createStore(\r\n    reducers,\r\n    {},\r\n    applyMiddleware(thunk)\r\n)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux'\nimport {store} from './redux/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}